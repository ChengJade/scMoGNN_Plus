import argparse
import os

def gnn_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('prefix')
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='disables CUDA training')
    parser.add_argument('-t', '--subtask', default='openproblems_bmmc_cite_phase2_rna')
    parser.add_argument('-d', '--data_folder', default='./data/public/phase2-data/predict_modality/')
    parser.add_argument('-pww', '--pathway_weight', default='cos', choices=['cos', 'one', 'pearson'])
    parser.add_argument('-pwth', '--pathway_threshold', type=float, default=0.0)
    parser.add_argument('-l', '--log_folder', default='./logs')
    parser.add_argument('-ef', '--extra_files_folder', default='./')
    parser.add_argument('-m', '--model_folder', default='./models')
    parser.add_argument('-r', '--result_folder', default='./results')
    parser.add_argument('-e', '--epoch', type=int, default=1500)
    parser.add_argument('-nbf', '--no_batch_features', action='store_true')
    parser.add_argument('-bf', '--batch_features', type=str, default='cell_summary')
    parser.add_argument('-npw', '--no_pathway', action='store_true')
    parser.add_argument('-opw', '--only_pathway', action='store_true')
    parser.add_argument('-res', '--residual', default='res_cat', choices=['none', 'res_add', 'res_cat'])
    parser.add_argument('-inres', '--initial_residual', action='store_true')
    parser.add_argument('-pwagg', '--pathway_aggregation', default='alpha',
                        choices=['sum', 'attention', 'two_gate', 'one_gate', 'alpha', 'cat', 'hadama'])
    parser.add_argument('-pwalpha', '--pathway_alpha', type=float, default=0.5)
    parser.add_argument('-nrc', '--no_readout_concatenate', action='store_true')
    parser.add_argument('-bs', '--batch_size', default=1000, type=int)
    parser.add_argument('-nm', '--normalization', default='group', choices=['batch', 'layer', 'group', 'none'])
    parser.add_argument('-ac', '--activation', default='leaky_relu', choices=['leaky_relu', 'relu', 'prelu', 'gelu'])
    parser.add_argument('-em', '--embedding_layers', default=2, type=int, choices=[1, 2, 3])
    parser.add_argument('-ro', '--readout_layers', default=1, type=int, choices=[1, 2])
    parser.add_argument('-conv', '--conv_layers', default=2, type=int, choices=[1, 2, 3, 4, 5, 6])
    parser.add_argument('-agg', '--agg_function', default='gcn', choices=['gcn', 'mean'])
    # parser.add_argument('-device', '--device', default='cuda')
    parser.add_argument('-sb', '--save_best', action='store_true')
    parser.add_argument('-sf', '--save_final', action='store_true')
    parser.add_argument('-lr', '--learning_rate', type=float, default=1e-2)
    parser.add_argument('-wd', '--weight_decay', type=float, default=1e-5)
    parser.add_argument('-hid', '--hidden_size', type=int, default=48)
    parser.add_argument('-edd', '--edge_dropout', type=float, default=0.4)
    parser.add_argument('-mdd', '--model_dropout', type=float, default=0.3)
    parser.add_argument('-es', '--early_stopping', type=int, default=0)
    # parser.add_argument('-c', '--cpu', type=int, default = 8)
    parser.add_argument('-ov', '--overlap', action='store_true')
    parser.add_argument('-or', '--output_relu', default='none', choices=['relu', 'leaky_relu', 'none'])
    parser.add_argument('-i', '--inductive', default='trans', choices=['normal', 'opt', 'trans'])
    parser.add_argument('-sa', '--subpath_activation', action='store_true')
    parser.add_argument('-ci', '--cell_init', default='none', choices=['none', 'ae'])
    parser.add_argument('-bas', '--batch_seperation', action='store_true')
    parser.add_argument('-cis', '--cell_init_res', action='store_true')


    return parser